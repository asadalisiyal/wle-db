name: Unit Test
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
permissions:
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      - uses: actions/checkout@v3
      - name: Install RELIC dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git cmake libgmp-dev libssl-dev libomp-dev
      - name: Install RELIC library
        run: |
          sudo git clone https://github.com/relic-toolkit/relic.git /usr/local/src/relic
          cd /usr/local/src/relic
          sudo mkdir build && cd build
          sudo ../preset/x64-pbc-bls12-381.sh .. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DCHECK=ON
          sudo make -j$(nproc)
          sudo make install
          sudo ldconfig
      - name: Set CGO environment variables
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I/usr/local/include/relic -DRLC_NO_CORE" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L/usr/local/lib -lrelic_s" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: Run Go Tests
        run: |
          make test-all
      - uses: actions/upload-artifact@v4
        with:
          name: "${{ github.sha }}-coverage"
          path: ./profile.out

  upload-coverage-report:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # Download all coverage reports from the 'tests' job
      - name: Download coverage reports
        uses: actions/download-artifact@v4

      - name: Set GOPATH
        run: echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

      - name: Add GOPATH/bin to PATH
        run: echo "GOBIN=$(go env GOPATH)/bin" >> $GITHUB_ENV

      - name: Install gocovmerge
        run: go get github.com/wadey/gocovmerge && go install github.com/wadey/gocovmerge

      - name: Merge coverage reports
        run: gocovmerge $(find . -type f -name '*profile.out') > coverage.txt

      - name: Check coverage report lines
        run: wc -l coverage.txt
        continue-on-error: true

      - name: Check coverage report files
        run: ls **/*profile.out
        continue-on-error: true

      # Now we upload the merged report to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

